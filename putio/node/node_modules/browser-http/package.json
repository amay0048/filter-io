{
  "name": "browser-http",
  "description": "Simple (but advanced) HTTP for browser",
  "version": "2.2.0",
  "author": {
    "name": "David Kudera",
    "email": "sakren@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:sakren/node-browser-http.git"
  },
  "license": "MIT",
  "keywords": [
    "http",
    "client",
    "browser",
    "ajax",
    "url"
  ],
  "engines": {
    "node": ">=0.9"
  },
  "main": "./lib/Http.js",
  "dependencies": {
    "q": "1.0.0",
    "escape-regexp": "0.0.1"
  },
  "devDependencies": {
    "mocha": "1.17.0",
    "mocha-phantomjs": "3.3.1",
    "phantomjs": "1.9.2-6",
    "chai": "1.8.1"
  },
  "scripts": {
    "test": "mocha-phantomjs -p ./node_modules/phantomjs/bin/phantomjs ./test/index.html",
    "build-and-test": "npm run build && npm run test",
    "build": "npm run build-standalone && npm run build-minified && npm run build-test",
    "build-test": "cd test; simq build;",
    "build-standalone": "simq build --config ./config/source.json",
    "build-minified": "simq build --config ./config/minified.json"
  },
  "readme": "[![NPM version](https://badge.fury.io/js/browser-http.png)](http://badge.fury.io/js/browser-http)\n[![Dependency Status](https://gemnasium.com/sakren/node-browser-http.png)](https://gemnasium.com/sakren/node-browser-http)\n[![Build Status](https://travis-ci.org/sakren/node-browser-http.png?branch=master)](https://travis-ci.org/sakren/node-browser-http)\n\n[![Donate](http://b.repl.ca/v1/donate-PayPal-brightgreen.png)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=YJCJ4FWVRDT4A)\n\n# http-browser\n\nSimple (but advanced) library for working with http in browser (like for example jQuery.ajax).\n\nhttp-browser uses [q](https://github.com/kriskowal/q) promise pattern and is instance of [EventEmitter](http://nodejs.org/api/events.html).\n\nYou can use it for example with [simq](https://github.com/sakren/node-simq) as you are used to from node environment or use\nstandalone build with expanded package into window:\n\n## Installation\n\n\n```\n$ npm install browser-http\n```\n\nor for standalone version just choose desired version and include it.\n* [Development version](https://github.com/sakren/node-browser-http/blob/master/http.js)\n* [Minified version](https://github.com/sakren/node-browser-http/blob/master/http.min.js)\n\n\n## Usage\n\n```\nvar http = require('browser-http');\n\n// or standalone version:\nvar http = window.http;\t\t// you can of course just call http directly without window at the beginning\n\nhttp.request('http://www.google.com', {type: 'GET'}).then(function(response) {\n\tconsole.log(response.text);\n}, function(e) {\n\tthrow e;\t\t// some error occurred\n});\n```\n\nIn then function, you will get response object with data from server.\n\n## Shorthands\n\n```\nvar http = require('browser-http');\n\nhttp.get('http://www.google.com');\nhttp.post('http://www.google.com');\nhttp.put('http://www.google.com');\nhttp.delete('http://www.google.com');\n```\n\n## Options\n\nIn every http function, you can set other options. Now it is just type and data.\n\n* type: GET, POST, PUT or DELETE\n* data: literal object of data which needs to be send to server\n\n## Response object\n\nBasically it is just wrapper for some data from XMLHttpRequest.\n\n* state\n* status\n* statusText\n* rawData: same like responseText\n* data: same like responseText or literal object (json)\n* xml: same like responseXML\n\n## Load JSON\n\nIf content-type in response header is `application/json` then your data will be automatically transformed into js object.\n\nIf you can not set this header on your server, than you can use `*Json` methods.\n\n```\nhttp.getJson('http://www.google.com/some.json').then(function(response) {\n\tconsole.log(response.data);\t\t// output will be object\n});\n\nhttp.postJson('http://www.google.com/some.json');\n```\n\n## Requests queue\n\nBy default all your requests are called from queue one by one, so there is always just one request running (or zero).\nInspiration from this article [http://blog.alexmaccaw.com/queuing-ajax-requests](http://blog.alexmaccaw.com/queuing-ajax-requests).\n\nYou can of course disable this behavior:\n```\nhttp.useQueue = false;\n```\n\n## JSONP\n\nIt is very easy to work with jsonp requests.\n\n```\nhttp.jsonp('http://some.url.com').then(function(response) {\n\tconsole.log(response.data);\n});\n```\n\n## Json hijacking\n\nFirst, please read [this](http://stackoverflow.com/questions/2669690/why-does-google-prepend-while1-to-their-json-responses)\ndiscussion on stackoverflow.\n\nNow if you want to use same technique just like Google or eg. Facebook do, you only need to set your own prefix in requests.\n\n```\nhttp.get('http://some.url.com', {\n\tjsonPrefix: 'while(1);'\n}).then(function(response) {\n\tconsole.log(response.data);\n});\n```\n\nString `while(1);` will be removed from the beginning of received data before parsing into json object.\n\n## Events\n\nYou can listen for all http events with your own functions.\n\n```\nhttp.on('send', function(response, request) {\n\tconsole.log('In any moment, new http request will be send to server');\n});\n\nhttp.on('complete', function(response, request) {\n\tconsole.log('I just finished some request, but there may be some errors');\n});\n\nhttp.on('success', function(response, request) {\n\tconsole.log('I have got response from server without any error :-)');\n});\n\nhttp.on('error', function(err, response, request) {\n\tconsole.log('Sorry, there was some error with this response');\n});\n```\n\n## Extensions\n\nSometimes it will be better to register whole group of events and this group is called extension.\n\n```\nhttp.addExtension('nameOfMyExtension', {\n\tsend: function(response, request) {},\n\tcomplete: function(response, request) {},\n\tsuccess: function(response, request) {},\n\terror: function(err, response, request) {},\n});\n```\n\nYou can also remove other extensions.\n\n```\nhttp.removeExtension('nameOfMyExtension');\n```\n\n### Build in extensions\n\nbrowser-http already comes with few extensions. Originally they were created for projects build on [Nette](http://nette.org/en/)\nframework, but can be used on any other project.\n\n#### Loading cursor\n\n```\nnew (require('browser-http/Extensions/Loading'));\n```\n\nstandalone version:\n```\nnew http.Extensions.Loading;\n```\n\nEvery time new request is send, your cursor is changed into `progress` cursor. After receiving response from server, cursor\nis changed into `auto`.\n\n#### Redirect\n\n```\nnew (require('browser-http/Extensions/Redirect'));\n```\n\nstandalone version:\n```\nnew http.Extensions.Redirect;\n```\n\nIf your server sends json data with `redirect` variable, then you will be redirected to address in this variable.\n\n#### Snippets\n\n```\nvar Snippets = require('browser-http/Extensions/Snippets');\nnew Snippets(window.jQuery);\n```\n\nstandalone version:\n```\nnew http.Extensions.Snippets(window.jQuery);\n```\n\nIf in response data is `snippets` object with html id and content pairs, then browser-http will iterate throw this object,\nfind element in page with given id and change content of this element into the one from given data.\n\nThis extension depends on jquery.\n\n#### Ajax links\n\n```\nvar Links = require('browser-http/Extensions/Links');\nnew Links(window.jQuery);\n```\n\nstandalone version:\n```\nnew http.Extensions.Links(window.jQuery);\n```\n\nThis is not true extension for browser-http. It listen for all click events on `a` links with class `ajax` but not with\nclass `not-ajax` and after this click, it creates ajax request.\n\nDepends on jquery.\n\n#### Ajax forms\n\nThis is the same like the previous one, but apply for all forms with `ajax` class.\nThis extension can not handle forms with file uploads.\nDepends on jquery.\n\n```\nvar Forms = require('browser-http/Extensions/Forms');\nnew Forms(window.jQuery);\n```\n\nstandalone version:\n```\nnew http.Extensions.Forms(window.jQuery);\n```\n\n## Tests\n\n```\n$ npm test\n```\n\n### Own tests\n\n```\nvar http = require('browser-http/Mocks/Http');\n\n// standalone version:\nvar http = http.Mocks.Http;\n\nafterEach(function() {\n\thttp.restore();\n});\n\nit('should load some data', function(done) {\n\thttp.receive('some data', {'content-type': 'text/plain'}, 200);\n\n\thttp.get('localhost').then(function(response) {\n\t\texpect(response.data).to.be.equal('some data');\n\t\tdone();\n\t});\n});\n\n// text/plain in headers list is default content-type, so you don't have to set it. Also status 200 is default.\n\nit('should load some data and check received data', function(done) {\n\thttp.receive('some data', {'content-type': 'application/json'});\n\n\thttp.once('send', function(response, request) {\n\t\texpect(request.xhr.url).to.be.equal('localhost?greeting=hello')\t\t\t// now we can test eg. url with parsed data\n\t});\n\n\thttp.get('localhost', {data: {greeting: 'hello'}}).then(function(response) {\n\t\texpect(response.data).to.be.eql({greeting: 'hello'});\n\t\tdone()\n\t});\n});\n```\n\n## Changelog\n\n* 2.2.0\n\t+ Added support for environments without `require` (like with [simq](https://github.com/sakren/node-simq))\n\t+ Tests uses minified standalone version of browser-http\n\n* 2.1.1\n\t+ Removed forgotten tests building\n\n* 2.1.0\n\t+ Added support for json prefixes ([discussion on stackoverflow](http://stackoverflow.com/questions/2669690/why-does-google-prepend-while1-to-their-json-responses))\n\n* 2.0.0\n\t+ jQuery must be passed in constructor into extensions which depends on it\n\t+ Updated dependencies\n\t+ Test frameworks are in devDependencies (not globally installed)\n\t+ Large refactoring (better for testing)\n\t+ Tests does not need real server (using mock from [philikon/MockHttpRequest](https://github.com/philikon/MockHttpRequest))\n\t+ Many optimizations\n\t+ Added some badges + travis\n\n* 1.8.0\n\t+ Requests are added into queue\n\t+ Added support for jsonp\n\n* 1.7.1\n\t+ Added some tests\n\t+ Bug with responses without content-type header\n\n* 1.7.0\n\t+ Refactoring\n\t+ `buildQuery` and `urlencode` moved to `browser-http/Helpers`\n\t+ Instance of EventEmitter\n\n* 1.6.4\n\t+ Optimizations + bug with sending data\n\n* 1.6.3\n\t+ Bug with `buildQuery` - replaced with the real one from jQuery\n\n* 1.6.2\n\t+ Just removed some useless code\n\n* 1.6.1\n\t+ Forgot to add Extensions/Links shortcut\n\n* 1.6.0\n\t+ `buildQuery` should got the same output like jQuery.param\n\t+ Added some extensions\n\n* 1.5.2\n\t+ Bug with sending data via POST method\n\n* 1.5.1\n\t+ Bug with X-Requested-With header\n\n* 1.5.0\n\t+ Added method isHistoryApiSupported\n\n* 1.4.0\n\t+ Sending X-Requested-With header\n\n* 1.3.1 - 1.3.5\n\t+ Bugs\n\n* 1.3.0\n\t+ Added `urlencode` and `buildQuery` methods\n\t+ Prepared changelog\n\t+ Added some tests\n\t+ Some bugs and optimizations\n\t+ Transforming response data into json if mime type is application/json",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/sakren/node-browser-http/issues"
  },
  "homepage": "https://github.com/sakren/node-browser-http",
  "_id": "browser-http@2.2.0",
  "_from": "browser-http@"
}
